{"meta":{"title":"加妙独舞","subtitle":"桃李不言，下自成蹊","description":"随笔、日志、技术分享、个人作品","author":"杜俊刚","url":"https://www.jiamiao.net.cn","root":"/"},"pages":[{"title":"","date":"2023-11-29T08:29:24.709Z","updated":"2023-11-29T08:29:24.709Z","comments":true,"path":"about/index.html","permalink":"https://www.jiamiao.net.cn/about/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-29T08:29:24.709Z","updated":"2023-11-29T08:29:24.709Z","comments":true,"path":"gallery/index.html","permalink":"https://www.jiamiao.net.cn/gallery/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-29T08:29:24.713Z","updated":"2023-11-29T08:29:24.713Z","comments":true,"path":"tagcloud/index.html","permalink":"https://www.jiamiao.net.cn/tagcloud/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-29T08:29:24.713Z","updated":"2023-11-29T08:29:24.713Z","comments":true,"path":"timeline/index.html","permalink":"https://www.jiamiao.net.cn/timeline/index.html","excerpt":"","text":""}],"posts":[{"title":"生产中harbor从http升级到https","slug":"harbor-从http升级到https","date":"2023-11-29T07:47:45.000Z","updated":"2023-11-29T08:29:24.709Z","comments":true,"path":"2023/11/29/harbor-从http升级到https/","link":"","permalink":"https://www.jiamiao.net.cn/2023/11/29/harbor-%E4%BB%8Ehttp%E5%8D%87%E7%BA%A7%E5%88%B0https/","excerpt":"","text":"生产中harbor从http升级到https Generate a Certificate Authority Certificate In a production environment, you should obtain a certificate from a CA. In a test or development environment, you can generate your own CA. To generate a CA certficate, run the following commands. Generate a CA certificate private key. 123mkdir /opt/certcd /opt/certopenssl genrsa -out ca.key 4096 Generate the CA certificate. Adapt the values in the -subj option to reflect your organization. If you use an FQDN to connect your Harbor host, you must specify it as the common name (CN) attribute. 1234openssl req -x509 -new -nodes -sha512 -days 3650 \\ -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=10.165.6.63&quot; \\ -key ca.key \\ -out ca.crt Generate a Server Certificate The certificate usually contains a .crt file and a .key file, for example, 10.165.6.63.crt and 10.165.6.63.key. Generate a private key. 1openssl genrsa -out 10.165.6.63.key 4096 Generate a certificate signing request (CSR). Adapt the values in the -subj option to reflect your organization. If you use an FQDN to connect your Harbor host, you must specify it as the common name (CN) attribute and use it in the key and CSR filenames. 1234openssl req -sha512 -new \\ -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=10.165.6.63&quot; \\ -key 10.165.6.63.key \\ -out 10.165.6.63.csr Generate an x509 v3 extension file. Regardless of whether you’re using either an FQDN or an IP address to connect to your Harbor host, you must create this file so that you can generate a certificate for your Harbor host that complies with the Subject Alternative Name (SAN) and x509 v3 extension requirements. Replace the DNS entries to reflect your domain. 12345678910cat &gt; v3.ext &lt;&lt;-EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names[alt_names]IP.1=10.165.6.63EOF 重点是[alt_names]，这里写的ip地址是最后认证的，比较重要。端口不需要，一旦认证了ip以后所有端口都可以是https的 [alt_names]： 后面为备用名称列表，可以是域名、泛域名、IP地址 Use the v3.ext file to generate a certificate for your Harbor host. Replace the 10.165.6.63 in the CRS and CRT file names with the Harbor host name. 12345openssl x509 -req -sha512 -days 3650 \\ -extfile v3.ext \\ -CA ca.crt -CAkey ca.key -CAcreateserial \\ -in 10.165.6.63.csr \\ -out 10.165.6.63.crt Provide the Certificates to Harbor and Docker After generating the ca.crt, 10.165.6.63.crt, and 10.165.6.63.key files, you must provide them to Harbor and to Docker, and reconfigure Harbor to use them. Copy the server certificate and key into the certficates folder on your Harbor host. 12cp 10.165.6.63.crt /data/cert/cp 10.165.6.63.key /data/cert/ Convert 10.165.6.63.crt to 10.165.6.63.cert, for use by Docker. The Docker daemon interprets .crt files as CA certificates and .cert files as client certificates. 1openssl x509 -inform PEM -in 10.165.6.63.crt -out 10.165.6.63.cert Copy the server certificate, key and CA files into the Docker certificates folder on the Harbor host. You must create the appropriate folders first. 123cp 10.165.6.63.cert /etc/docker/certs.d/10.165.6.63/cp 10.165.6.63.key /etc/docker/certs.d/10.165.6.63/cp ca.crt /etc/docker/certs.d/10.165.6.63/ If you mapped the default nginx port 443 to a different port, create the folder /etc/docker/certs.d/10.165.6.63:port, or /etc/docker/certs.d/harbor_IP:port. Restart Docker Engine. 1systemctl restart docker You might also need to trust the certificate at the OS level. See Troubleshooting Harbor Installation for more information. The following example illustrates a configuration that uses custom certificates. 12345/etc/docker/certs.d/ └── 10.165.6.63:5000 ├── 10.165.6.63.cert &lt;-- Server certificate signed by CA ├── 10.165.6.63.key &lt;-- Server key signed by CA └── ca.crt &lt;-- Certificate authority that signed the registry certificate Deploy or Reconfigure Harbor If you have not yet deployed Harbor, see Configure the Harbor YML File for information about how to configure Harbor to use the certificates by specifying the hostname and https attributes in harbor.yml. If you already deployed Harbor with HTTP and want to reconfigure it to use HTTPS, perform the following steps. Run the prepare script to enable HTTPS. Harbor uses an nginx instance as a reverse proxy for all services. You use the prepare script to configure nginx to use HTTPS. The prepare is in the Harbor installer bundle, at the same level as the install.sh script. 1./prepare If Harbor is running, stop and remove the existing instance. Your image data remains in the file system, so no data is lost. 1docker-compose down -v Restart Harbor: 1docker-compose up -d Verify the HTTPS Connection After setting up HTTPS for Harbor, you can verify the HTTPS connection by performing the following steps. Open a browser and enter https://10.165.6.63. It should display the Harbor interface. Some browsers might show a warning stating that the Certificate Authority (CA) is unknown. This happens when using a self-signed CA that is not from a trusted third-party CA. You can import the CA to the browser to remove the warning. On a machine that runs the Docker daemon, check the /etc/docker/daemon.json file to make sure that the -insecure-registry option is not set for https://10.165.6.63. Log into Harbor from the Docker client. 1docker login 10.165.6.63:5000 If you’ve mapped nginx 443 port to a different port,add the port in the login command. 1docker login 10.165.6.63:5000 升级完成。","categories":[],"tags":[{"name":"harbor","slug":"harbor","permalink":"https://www.jiamiao.net.cn/tags/harbor/"},{"name":"http","slug":"http","permalink":"https://www.jiamiao.net.cn/tags/http/"},{"name":"https","slug":"https","permalink":"https://www.jiamiao.net.cn/tags/https/"},{"name":"docker","slug":"docker","permalink":"https://www.jiamiao.net.cn/tags/docker/"}]},{"title":"window下kubectl访问k8s集群","slug":"window下通过kubectl访问k8s集群","date":"2023-11-29T07:47:45.000Z","updated":"2023-11-29T08:29:24.709Z","comments":true,"path":"2023/11/29/window下通过kubectl访问k8s集群/","link":"","permalink":"https://www.jiamiao.net.cn/2023/11/29/window%E4%B8%8B%E9%80%9A%E8%BF%87kubectl%E8%AE%BF%E9%97%AEk8s%E9%9B%86%E7%BE%A4/","excerpt":"","text":"window下kubectl访问k8s集群 1curl.exe -LO &quot;https://dl.k8s.io/release/v1.28.4/bin/windows/amd64/kubectl.exe&quot; git bash 当前我的k8s是v1.20.11 版本所以下载如下 1curl -LO &quot;https://dl.k8s.io/release/v1.20.11/bin/windows/amd64/kubectl.exe&quot; 放入 gitbash 家目录的bin下 1D:\\git\\Git\\mingw64\\bin 然后导入配置文件，就可以访问集群了 123456789101112131415161718192021export kubeconfig=./config$ kubectl versionClient Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;20&quot;, GitVersion:&quot;v1.20.11&quot;, GitCommit:&quot;27522a29febbcc4badac257763044d0d90c11abd&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2021-09-15T19:21:44Z&quot;, GoVersion:&quot;go1.15.15&quot;, Compiler:&quot;gc&quot;, Platform:&quot;windows/amd64&quot;&#125;Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;20&quot;, GitVersion:&quot;v1.20.11&quot;, GitCommit:&quot;27522a29febbcc4badac257763044d0d90c11abd&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2021-09-15T19:16:25Z&quot;, GoVersion:&quot;go1.15.15&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;$ kubectl get nodesNAME STATUS ROLES AGE VERSIONfastdfs02 Ready worker 35d v1.20.11k8s-master01 Ready controlplane,etcd,worker 298d v1.20.11k8s-master02 Ready controlplane,etcd,worker 298d v1.20.11k8s-master03 Ready controlplane,etcd,worker 298d v1.20.11node-jenkins-master Ready worker 287d v1.20.11node01 Ready worker 298d v1.20.11node02 Ready worker 298d v1.20.11node03 Ready worker 298d v1.20.11node04 Ready worker 298d v1.20.11node05 Ready worker 225d v1.20.11node6 Ready worker 176d v1.20.11sky-es01 Ready worker 40d v1.20.11sky-es02 Ready worker 40d v1.20.11sky-es03 Ready worker 40d v1.20.11","categories":[],"tags":[{"name":"window, kubectl, k8s","slug":"window-kubectl-k8s","permalink":"https://www.jiamiao.net.cn/tags/window-kubectl-k8s/"},{"name":"k8s","slug":"k8s","permalink":"https://www.jiamiao.net.cn/tags/k8s/"}]},{"title":"新版单机fastdfs安装","slug":"新版单机fastdfs安装","date":"2023-10-24T07:04:45.000Z","updated":"2023-11-29T08:29:24.709Z","comments":true,"path":"2023/10/24/新版单机fastdfs安装/","link":"","permalink":"https://www.jiamiao.net.cn/2023/10/24/%E6%96%B0%E7%89%88%E5%8D%95%E6%9C%BAfastdfs%E5%AE%89%E8%A3%85/","excerpt":"","text":"1, 拉取最新镜像 123docker pull ygqygq2/fastdfs-nginx:V6.9.4docker tag ygqygq2/fastdfs-nginx:V6.9.4 192.168.0.79:5000/libray/fastdfs-nginx:V6.9.4docker push 192.168.0.79:5000/libray/fastdfs-nginx:V6.9.4 2, 编写部署文件 123mkdir -p /opt/fastdfscd /opt/fastdfsvi docker-compose.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849version: &#x27;3&#x27;#networks:# fastdfs-net:# external: truenetworks: fastdfs-net: driver: bridgeservices: tracker: container_name: tracker image: 192.168.0.79:5000/library/fastdfs-nginx:V6.9.4 command: tracker #network_mode: host networks: - fastdfs-net volumes: - /var/fdfs/tracker:/var/fdfs ports: - 22122:22122 storage0: container_name: storage0 image: 192.168.0.79:5000/library/fastdfs-nginx:V6.9.4 command: storage #network_mode: host networks: - fastdfs-net environment: - TRACKER_SERVER=tracker:22122 volumes: - /var/fdfs/storage0:/var/fdfs ports: - 28080:8080 depends_on: - tracker storage1: container_name: storage1 image: 192.168.0.79:5000/library/fastdfs-nginx:V6.9.4 command: storage #network_mode: host networks: - fastdfs-net environment: - TRACKER_SERVER=tracker:22122 volumes: - /var/fdfs/storage1:/var/fdfs ports: - 28081:8080 depends_on: - tracker 3, 启动应用并验证 1234567891011121314docker compose up -ddocker exec -it tracker bash[root@936b4a677e5b fdfs]# date &gt;aaa.txt[root@936b4a677e5b fdfs]# fdfs_upload_file /etc/fdfs/client.conf aaa.txtgroup1/M00/00/00/rBIAA2R-lRCAYKF3AAAAHVN3P3Y136.txt打开另一终端访问[root@fastdfs1 ~]# curl localhost:28080/group1/M00/00/00/rBIAA2R-lRCAYKF3AAAAHVN3P3Y136.txtTue Jun 6 02:07:29 UTC 2023[root@fastdfs1 ~]# curl localhost:28081/group1/M00/00/00/rBIAA2R-lRCAYKF3AAAAHVN3P3Y136.txtTue Jun 6 02:07:29 UTC 2023","categories":[],"tags":[{"name":"fastdfs","slug":"fastdfs","permalink":"https://www.jiamiao.net.cn/tags/fastdfs/"},{"name":"docker","slug":"docker","permalink":"https://www.jiamiao.net.cn/tags/docker/"}]},{"title":"docker-compose 安装fastdfs","slug":"旧版单机fastdfs安装","date":"2023-10-24T07:04:45.000Z","updated":"2023-11-29T08:29:24.709Z","comments":true,"path":"2023/10/24/旧版单机fastdfs安装/","link":"","permalink":"https://www.jiamiao.net.cn/2023/10/24/%E6%97%A7%E7%89%88%E5%8D%95%E6%9C%BAfastdfs%E5%AE%89%E8%A3%85/","excerpt":"","text":"1, 配置docker-compose.yml mkdir -p /opt/fastdfs cd /opt/fastdfs vi docker-compose.yml 12345678910111213141516171819202122232425262728293031323334353637version: &#x27;2&#x27;services: fastdfs-tracker: hostname: fastdfs-tracker container_name: fastdfs-tracker image: season/fastdfs:1.2 network_mode: &quot;host&quot; command: tracker volumes: - ./tracker_data:/fastdfs/tracker/data fastdfs-storage: hostname: fastdfs-storage container_name: fastdfs-storage image: season/fastdfs:1.2 network_mode: &quot;host&quot; volumes: - ./storage_data:/fastdfs/storage/data - ./store_path:/fastdfs/store_path environment: - TRACKER_SERVER=10.33.5.109:22122 command: storage depends_on: - fastdfs-tracker fastdfs-nginx: hostname: fastdfs-nginx container_name: fastdfs-nginx image: season/fastdfs:1.2 network_mode: &quot;host&quot; volumes: - ./nginx.conf:/etc/nginx/conf/nginx.conf - ./store_path:/fastdfs/store_path environment: - TRACKER_SERVER=10.33.5.109:22122 command: nginx 2, 编辑 nginx.conf vi nginx.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#user nobody;worker_processes 1; #error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info; #pid logs/nginx.pid; events &#123; worker_connections 1024;&#125; http &#123; include mime.types; default_type application/octet-stream; #log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 7003; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location /group1/M00 &#123; root /fastdfs/storage/data; ngx_fastdfs_module; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 3, 启动fastDFS docker-compose up -d 查看容器状态 docker-compose ps 4, 客户端测试 配置客户端访问 docker run -tid --name fdfs_sh -p 13000:13000 season/fastdfs sh docker cp fdfs_sh:/fdfs_conf/client.conf ./ 配置客户端 vi client.conf 12base_path=/fastdfstracker_server=10.33.5.109:22122 重新配置客户端容器 docker rm -f fdfs_sh docker run -tid -v /opt/fastdfs/client.conf:/fdfs_conf/client.conf --name fdfs_sh -p 13000:13000 season/fastdfs sh 进入容器测试上传文件 docker exec -it fdfs_sh sh 生成文件并上传 echo hello&gt;b.txt fdfs_upload_file /fdfs_conf/client.conf /b.txt 返回的文件地址 group1/M00/00/00/CiEFbWO_x2WAU2l6AAAABncc3SA269.txt 浏览器访问地址 http://10.33.5.109:7003/group1/M00/00/00/CiEFbWO_x2WAU2l6AAAABncc3SA269.txt","categories":[],"tags":[{"name":"fastdfs","slug":"fastdfs","permalink":"https://www.jiamiao.net.cn/tags/fastdfs/"},{"name":"docker","slug":"docker","permalink":"https://www.jiamiao.net.cn/tags/docker/"}]},{"title":"centos7部署高可用fastdfs","slug":"部署高可用fastdfs","date":"2023-10-24T07:04:45.000Z","updated":"2023-11-29T08:29:24.709Z","comments":true,"path":"2023/10/24/部署高可用fastdfs/","link":"","permalink":"https://www.jiamiao.net.cn/2023/10/24/%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8fastdfs/","excerpt":"","text":"1，环境介绍 由俩台服务器实现fastdfs的高可用 192.168.174.132 tracker，nginx，storage 192.168.174.150 tracker，nginx，storage 2，初始化centos7 2.1，关闭selinux 12setenforce 0sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config 2.2, 关闭防火墙 1systemctl stop firewalld &amp;&amp; systemctl disable firewalld 2.3, 配置时间同步 storage 同步文件依赖时间戳，所以要保证所有服务器时间一致。 123yum install -y chrony \\&amp;&amp; systemctl start chronyd &amp;&amp; systemctl enable chronyd \\&amp;&amp; timedatectl set-timezone Asia/Shanghai &amp;&amp; timedatectl set-ntp yes &amp;&amp;timedatectl set-local-rtc 0 2.4，配置limit 123456vi /etc/security/limits.confroot soft nofile 65535root hard nofile 65535 * soft nofile 65535 * hard nofile 65535 注：只配置最后两行不就可以了吗，为啥还要单独为root用户配置呢？查了网上资料，说是*这样的通配符对root用户无效，所以root需要单独配置 3, 高可用安装fastdfs 3.1 ，生成安装路径 ​ 俩台服务器都创建目录 1234mkdir -p /data/docker/fastdfs/tracker/data #data为tracker基础数据存储目录mkdir -p /data/docker/fastdfs/storage/data #data为storage基础数据mkdir -p /data/docker/fastdfs/upload/path&#123;0,1,2,3&#125; #存储上传的文件,当有多块硬盘时，挂载到相应目录上即可 /data/fastdfs/upload/path0~n 3.2，上传配置文件并修改配置 https://github.com/jiamiao442/fastdfs-nginx.git 将配置文件fastdfs-conf中的文件上传到第一台服务器上/data/docker/fastdfs/ 目录中 12[root@ip-192-168-174-132 fastdfs]# ls -Fconf/ nginx_conf/ nginx_conf.d/ setting_conf.sh* storage/ tracker/ upload/ 修改setting_conf.sh，主要修改以下几个参数，其他不变 12345678910111213141516171819# 1. tracker 主要参数，生产环境中建议更改一下端口tracker_port=22122# 实现互备，两台tracker就够了tracker_server=&quot;tracker_server = 192.168.174.132:$tracker_port\\ntracker_server = 192.168.174.150:$tracker_port&quot;# 格式：&lt;id&gt; &lt;group_name&gt; &lt;ip_or_hostnamestorage_ids=&quot;100001 group1 192.168.174.132100002 group1 192.168.174.150&quot;# 设置tracker访问IP限制，避免谁都能上传文件，默认是allow_hosts = *allow_hosts=&quot;allow_hosts = 192.168.174.0/24\\n&quot;# 2. local storage 主要参数，生产环境中建议更改一下端口storage_group_name=&quot;group1&quot;storage_server_port=23000store_path_count=1 #文件存储目录的个数，存储目录约定为/data/fastdfs/upload/path0~n 运行脚本生成配置文件 1234567891011121314151617[root@ip-192-168-174-132 fastdfs]# bash setting_conf.sh 请先设置好本脚本的tracker \\ storage 的参数变量，然后再选择： [1] 配置 tracker [2] 配置 storageplease input number 1 to 2: 1 配置文件设置完毕，建议人工复核一下[root@ip-192-168-174-132 fastdfs]# bash setting_conf.sh 请先设置好本脚本的tracker \\ storage 的参数变量，然后再选择： [1] 配置 tracker [2] 配置 storageplease input number 1 to 2: 2 配置文件设置完毕，建议人工复核一下[root@ip-192-168-174-132 fastdfs]# 检测没有问题后将配置文件复制到另一台服务器 123scp -r /data/docker/fastdfs/conf root@192.168.174.150:/data/docker/fastdfs/scp -r /data/docker/fastdfs/nginx_conf root@192.168.174.150:/data/docker/fastdfs/scp -r /data/docker/fastdfs/nginx_conf.d root@192.168.174.150:/data/docker/fastdfs/ 3.3, 启动tracker 两台同时启动 1234docker run -d --net=host --restart=always --name=tracker \\-v /data/docker/fastdfs/tracker/data:/data/fastdfs_data \\-v /data/docker/fastdfs/conf:/etc/fdfs \\ jiamiao442/fastdfs-nginx:latest tracker 3.4 启动storage 两台同时启动 12345678docker run -d --net=host --restart always --name=storage0 \\--privileged=true \\-v /data/docker/fastdfs/storage/data:/data/fastdfs_data \\-v /data/docker/fastdfs/conf:/etc/fdfs \\-v /data/docker/fastdfs/upload:/data/fastdfs/upload \\-v /data/docker/fastdfs/nginx_conf/nginx.conf:/usr/local/nginx/conf/nginx.conf \\-v /data/docker/fastdfs/nginx_conf.d:/usr/local/nginx/conf.d \\ jiamiao442/fastdfs-nginx:latest storage 3.5 检查是否可用 123456789docker exec -it storage0 shdate &gt;aaa.txtfdfs_upload_file /etc/fdfs/client.conf aaa.txt group1/M00/00/00/oYYBAGR4VxSAdTkeAAAAHYhCyck239.txt 浏览器访问http://192.168.174.132:9088/group1/M00/00/00/oYYBAGR4VxSAdTkeAAAAHYhCyck239.txt http://192.168.174.150:9088/group1/M00/00/00/oYYBAGR4VxSAdTkeAAAAHYhCyck239.txt","categories":[],"tags":[{"name":"fastdfs","slug":"fastdfs","permalink":"https://www.jiamiao.net.cn/tags/fastdfs/"},{"name":"docker","slug":"docker","permalink":"https://www.jiamiao.net.cn/tags/docker/"}]}],"categories":[],"tags":[{"name":"harbor","slug":"harbor","permalink":"https://www.jiamiao.net.cn/tags/harbor/"},{"name":"http","slug":"http","permalink":"https://www.jiamiao.net.cn/tags/http/"},{"name":"https","slug":"https","permalink":"https://www.jiamiao.net.cn/tags/https/"},{"name":"docker","slug":"docker","permalink":"https://www.jiamiao.net.cn/tags/docker/"},{"name":"window, kubectl, k8s","slug":"window-kubectl-k8s","permalink":"https://www.jiamiao.net.cn/tags/window-kubectl-k8s/"},{"name":"k8s","slug":"k8s","permalink":"https://www.jiamiao.net.cn/tags/k8s/"},{"name":"fastdfs","slug":"fastdfs","permalink":"https://www.jiamiao.net.cn/tags/fastdfs/"}]}